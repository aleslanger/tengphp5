#!/bin/sh
#
# Teng -- a general purpose templating engine.
# Copyright (C) 2004  Seznam.cz, a.s.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Seznam.cz, a.s.
# Naskove 1, Praha 5, 15000, Czech Republic
# http://www.seznam.cz, mailto:teng@firma.seznam.cz
#
#
# $Id: make.sh,v 1.9 2010-02-15 09:27:56 burlog Exp $
#
# DESCRIPTION
# Packager for Teng library.
#
# AUTHORS
# Vaclav Blazek <blazek@firma.seznam.cz>
#
# HISTORY
# 2004-05-03  (vasek)
#             Created.
#

########################################################################
# Command line options.                                                #
########################################################################
while [ "$#" != "0" ]; do
    case "$1" in
        -help)
            echo ""
            echo "Usage: make.sh [--with-php-config=FILE] [--debug] [--help]"
            echo ""
            echo "    --with-php-config FILE"
            echo "    --with-php-config=FILE   set path to the php-config script"
            echo "    --debug                  log every command to stderr (set -x)"
            echo "    --help                   show this help"
            echo ""
            echo "    To change package's version please edit file php4-teng.version"
            echo "    in this directory. Control file is generated by expanding @tags@"
            echo "    in the php4-teng.control file."
            echo ""
            echo "    You can also create php4-teng.postinst, php4-teng.preinst,"
            echo "    php4-teng.conffiles, php4-teng.prerm and php4-teng.postrm files"
            echo "    that would be used as postinst, preinst, conffiles, prerm and"
            echo "    postrm files in the package."
            echo ""
            exit 0
        ;;

        --debug)
            set -x
            DEBUG="debug"
        ;;

        --with-php-config=*)
            PHP_CONFIG=${1:18}
        ;;

        --with-php-config)
            PHP_CONFIG=$2
            shift
        ;;

        # hidden parameter for recursive call of make.sh
        --make-binary)
            MODE="binary"
        ;;

        *)
            echo "Unknown option '$1', try make.sh --help." >> /dev/stderr
            exit 1
        ;;
    esac
    shift
done

function buildDepends() { 

    function listPackages() { 
        ( 
            for x in $*; do 
                for a in `ldd "$x" | cut -f 2- -d"/" | cut -f 1 -d"("`; do 
                    echo "$(dpkg -S "`readlink -f "/$a"`" | cut -f 1 -d:)" 
                done 
            done 
        ) | sort -u 
    } 

    function depends() { 
        ( 
            for a in `listPackages $*`; do 
                if [ -f "/var/lib/dpkg/info/$a.shlibs" ]; then 
                    cat "/var/lib/dpkg/info/$a.shlibs" | grep -v "^[^:]*: " | grep " $a" \
                        | cut -f 3- -d" " | sed "s/\(.*\)/\1, /g" 
                fi 
            done 
        ) | sort -u 
    } 

    depends $* | tr -d "\n" | sed "s/,\s*$//g" 
    echo 
}

function make_dirs {
    # Create package destination directory.
    PACKAGE_DIR=pkg
    mkdir -p ${PACKAGE_DIR}

    # Create build directory (force it to be clean).
    BUILD_DIR=build
    mkdir -p ${BUILD_DIR}
    rm -Rf ${BUILD_DIR}

    # Create directories and set their attributes.
    DEBIAN_BASE=${BUILD_DIR}/${PACKAGE_NAME}
    CONTROL_DIR=${DEBIAN_BASE}/DEBIAN
    mkdir -p ${CONTROL_DIR}
    chmod 0755 ${CONTROL_DIR}
}

function build_package {
    ########################################################################
    # Package housekeeping                                                 #
    ########################################################################

    # Copy extra package files.
    for FILE in postinst preinst prerm postrm; do
        if test -f ${PROJECT_NAME}.${FILE}; then
            cp ${PROJECT_NAME}.${FILE} ${CONTROL_DIR}/${FILE}
            chmod 755 ${CONTROL_DIR}/${FILE}
        fi
    done

    # Copy unrunnable files
    test -f ${PROJECT_NAME}.conffiles \
        && cp ${PROJECT_NAME}.conffiles ${CONTROL_DIR}/conffiles

    # Remove any lost CVS entries in the package tree.
    find ${DEBIAN_BASE} -path "*CVS*" -exec rm -Rf '{}' \; || exit 1

    # build extra depend
    if grep -q "use Dpkg::Control" "`which dpkg-shlibdeps`" ; then 
        SH_DEPEND=$(buildDepends $(find ${MODULE_DIR} -name "*.so")) 
    else 
        SH_DEPEND=$(dpkg-shlibdeps -O $(find ${MODULE_DIR} -name "*.so") | \
            gawk '{match($0, /^.*Depends=(.*)$/, a); print a[1]}') 
    fi

    # Get current phpapi a zendapi version numbers
    PHP_API_VERSION=$(${PHP_CONFIG} --phpapi)
    ZEND_MODULE_API_NO=$(phpize${PHP_MAIN_VERSION} --version | grep -i 'zend module api' \
            | cut -f2 -d':' | sed -e 's/ //g')

    # Dependence to current (php | zend) api
    EXTRA_DEPEND="phpapi-${PHP_API_VERSION} | zendapi-${ZEND_MODULE_API_NO}"

    # Compute package's size.
    SIZEDU=$(du -sk ${DEBIAN_BASE} | awk '{print $1}') || exit 1
    SIZEDIR=$(find ${DEBIAN_BASE} -type d | wc | awk '{print $1}') || exit 1
    SIZE=$[ $SIZEDU - $SIZEDIR ] || exit 1

    VERSION=$(< ${PROJECT_NAME}'.version')

    # Process control file -- all <tags> will be replaced with
    # appropriate data.
    sed     -e "s/@VERSION@/${VERSION}/" \
            -e "s/@PACKAGE@/${PACKAGE_NAME}/" \
            -e "s/@MAINTAINER@/${MAINTAINER}/" \
            -e "s/@ARCHITECTURE@/$(dpkg --print-architecture)/" \
            -e "s/@SIZE@/${SIZE}/" \
            -e "s/@SH_DEPEND@/${SH_DEPEND}/" \
            -e "s/@EXTRA_DEPEND@/${EXTRA_DEPEND}/" \
            ${PROJECT_NAME}.control > ${CONTROL_DIR}/control || exit 1

    # Create and rename the package.
    dpkg --build ${DEBIAN_BASE} ${PACKAGE_DIR}/${PACKAGE_NAME}.deb || exit 1
    dpkg-name -o ${PACKAGE_DIR}/${PACKAGE_NAME}.deb || exit 1

    # Get rid of temporary build directory.
    rm -r ${BUILD_DIR}
}

# determine operation
if [ "${MODE}" = "binary" ]; then
    # we are making binarty package -- called recursively from make.sh
    # Make all directories
    make_dirs || exit 1

    ########################################################################
    # Copy all files                                                       #
    ########################################################################

    # make module dir
    EXTENSION_DIR=$(${PHP_CONFIG} --extension-dir)
    MODULE_DIR=${DEBIAN_BASE}/${EXTENSION_DIR}
    rm -Rf ${MODULE_DIR}
    mkdir -p ${MODULE_DIR}

    # copy all to the package
    cp -v ../modules/*.so ${MODULE_DIR} || exit 1

    # Build the package
    build_package
    exit $?
fi


########################################################################
# Retrieve information from the Python packages setup.py.              #
########################################################################

# Maintainer of this module
MAINTAINER="Vaclav Blazek <blazek@firma.seznam.cz>"

# Set defaults if not set
if [ "${PHP_CONFIG}" = "" ]; then
    PHP_CONFIG="php-config"
fi

PHP_MAIN_VERSION="`${PHP_CONFIG} --version`"
PHP_MAIN_VERSION="${PHP_MAIN_VERSION:0:1}"

# Compose package name 'php4-teng'
PROJECT_NAME="php${PHP_MAIN_VERSION}-teng"
PACKAGE_NAME="${PROJECT_NAME}"

# Inform about package name.
echo "Building package ${PACKAGE_NAME}."

########################################################################
# Build                                                                #
########################################################################
(
    # go to the main directory
    cd ..;
    ./configure --with-php-config=${PHP_CONFIG} || exit 1
    # clean all residuals from previous run
    make clean || exit 1
    # build
    make || exit 1
) || exit 1


########################################################################
# Call packagers to create both binary an dev packages.                #
########################################################################

# Variable INSTALL_DIR must be exported for propper
# operation of packages.

export PROJECT_NAME
export MAINTAINER
export PACKAGE_NAME
export PHP_CONFIG
export DEBUG
export PHP_MAIN_VERSION

# Create binary package (must be run under fakeroot).
fakeroot ./make.sh --make-binary || exit 1
